Oracle DATABASE
DDL  DATA DEFINITION LANGUAGE:-  ALTER,CONTROL,DROP ,TRUNCATE ,RENAME
DML  DATA MANIPULATION LANGUAGE: INSERT ,DELETE,UPDATE,MERGE
DRL  DATA RETRIVAL LANGUAGE : SELECT
TCL  TRANSACTION CONTROL LANGUAGE : COMMIT,ROLLBACK,SAVEPOINT
DCL  DATA CONTROL LANGUAGE : GRANT ,REVOKE

CONSTRAINTS IN ORACLE :- PK,FK,NOT NULL,CHECK,UNIQUE
SELECT STATEMENTS IN SQLCODE
SINGLE ROW FUNCTIONS
JOINS :- INNER, LEFT,RIGHT,OUTER FULL,SELF JOINS
AGGREGATE FUNCTION :- MIN,MAX,AVG,COUNT,GROUP BY,HAVING
SUB QUERY
SET OPERATOR :- UNION,UNION ALLL,INTERSECT,MINUS
ANALYTICAL/WINDOWS FUNCTION IN SQL
VIEWS,MATERIALIZED VIEWS
INDEXES IN Oracle
MERGE STATEMENTS
REGULAR EXPRESSION
PERFORMANCE TUNING  ;

DATA TYPE :-
 1. NUMERIC :
	 NUMBER (8),
	 NUMBER (8,2),
	 NUMBER (2,2),
 2. CHAR :
     CHAR
	 VARCHAR()
	 VARCHAR2()     4000 BYTES 
 3. DATE :
     DATE 10-JANVERY-2024
############################################################
 
 HOW TO GET BACKUP FROM DATABASE
 1. BKP A TABLE(create i t)
 2.TRUNCATE BASE TABLE (clean it original)
 3.MODIFY DATA TYPE (modify the table as per requied)
 4.RESTORE THE DATA 
 5.DROP BKP TABLE
 EX:- CREATE TABLE (BKP_TABLE_NAME) AS SELECT * FROM (TABLE_NAME)
      CREATE TABLE (BKP_TABLE_NAME) AS SELECT * FROM (TABLE_NAME) WHERE 1=2;
	  ( THIS WILL BE CRATE THE STRUCTURE ONLY)
	  TIME (1:02:49)

CONSTRAINTS IN ORACLE;
======================

DATA VALIDATION BEFORE INSERTING THE DATA INTO THE table

1.  PRIMARY KEY
 - IT WILL NOT ALLOW DUPLICATE VALUES
 - IT WILL NOT ALLOW NULL
 - ONLY ON PRIMARY KEY IN A TABLE 
  
--  composite KEY : combination of two columns is called composite key.

  
 
2. NOT NULL       *MANDATORY
 - IT WILL NOT ALLOW NULL VALUE
 - IT WILL ALLOW DUPLICATE
 
3. UNIQUE
 - IT WILL NOT ALLOW DUPLICATE
 - IT WILL ALLOW NULL

4. CHECK
 - DATE VALIDATION
   CHECK(AGE => 18)
5. FOREIGN KEY 
 - RELATIONSHIP BETWEEN TWO TABLES
 - IT WILL ACCEPT DUPLICATE VALUE
 - IT SHOULD BE PRIMARY KEY IN ANOTHER TABLE
 - ANY NO OF FOREIGN KEY IN A TABLE  
   -- FOREGIN KEY(CITY_ID) REFERENCES CITY(CITY_ID)
   
 VIOLATION :
  INTEGRITY CONSTRAINTS VOILATED - PARENT KEY NOT FOUND
  

 BACKUP DATA ALL DETAILS 
 CREATE TABLE (GIVE_NEW_NAME_BACKUP) AS SELECT * FROM (TABLE NAME ) ; ( IT WILL BE CRATE SAME TABLE ONLY ) 
 CREATE TABLE (TABLE_NAME ) AS SELECT * FROM (EXENSTING_TABLE ) WHERE 1=2; ( IT WILL CREATE THE STRUCTURE OF THE TABLE )
 TRUNCATE  TABLE (TABLE_NAME ) (WHILE WE DOING THIS WE CANN'T ROLL BACK , IT IS DDL COMMAND )

1) BKP A table
2) TRUNCATE BASE table
3) MODIFY DATA TYPE
4) RESTORE THE DATA
5) DROP BKP table
------------------------------------------------------------------------------------------
 DATE FORMATE 
 SELECT * FROM employees WHERE TO_CHAR(HIRE_DATE,'MM') ='02';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'dd')= '10';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'YYYY') ='2007';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'FMDAY')='MONDAY'; (FORMATE DAY) 

SELECT * FROM DUAL;
SELECT * FROM employees WHERE TO_CHAR(HIRE_DATE,'MM') ='02';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'dd')= '10';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'YYYY') ='2007';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'FMDAY')='MONDAY'; 

================================================================
PATTERN MATCHING  WE CAN USE 
LIKE 'S%'; IT WILL GIVE THE S AFTER EVERY THING (STARTING WITH s ONLY)
LIKE '%S';  IT WILL BE GIVE THE BEFORE EVERY THING ( ENDING WITH s)
LIKE '%S%'; IT WILL BE GIVE BEFORE AND AFTER S EVERY THING (IN BETWEEN S)
LIKE 'S%N';  STARTING WITH S AND ENDING WITH N
LIKE '________'; IT WILL BE GIVE THE SPACE CHARATER ONLY (UNDERSCORE)

-- SELECT * FROM employees WHERE TO_CHAR(HIRE_DATE,'MM') ='02';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'dd')= '10';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'YYYY') ='2007';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'FMDAY')='MONDAY'; 
SELECT * FROM DUAL;
SELECT * FROM employees WHERE TO_CHAR(HIRE_DATE,'MM') ='02';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'dd')= '10';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'YYYY') ='2007';
SELECT * FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'FMDAY')='MONDAY'; 
===============================================================================
PATTERN MATCHING  WE CAN USE LIKE 
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'S%';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE'%s';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE'%an%';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'S%n';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '_______';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '_a____';
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE'_a_t___';
SELECT * FROM EMPLOYEES WHERE SALARY LIKE '_500';--- 
-------------------------------------------------------------------------------------------------------------------
--ORDER BY ---
-- HERE ONE DIFFERENT IS THER THAT CAPITAL LETER WILL BE GIVE 'A' AND AFTER SMALL 'a'
-- IT WILL GIVE THE DEFAULT ASC 

SELECT * FROM EMPLOYEES ORDER BY FIRST_NAME ; 
SELECT * FROM EMPLOYEES ORDER BY FIRST_NAME DESC;
SELECT * FROM EMPLOYEES ORDER BY FIRST_NAME ASC;
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC ,HIRE_DATE;
SELECT * FROM EMPLOYEES ORDER BY 8;
--(8 COLUMN WILL BE ASC)
SELECT * FROM EMPLOYEES ORDER BY 6 DESC,8; 
--(6 DESC ,8 IT WILL BE GIVE THE 6 ASC AND 8 WILL ASE)
SELECT * FROM EMPLOYEES ORDER BY 3;
--- HERE 3 IS THE COLUMN WILL BE GIVE THE ASC 
--
;
-------------------------------------------------------------------------------------------------------------------------
-- SINGLE ROW FUNCTION  IN ORACLE;
SELECT FIRST_NAME ,UPPER(FIRST_NAME),LOWER(FIRST_NAME),INITCAP(FIRST_NAME),LENGTH(FIRST_NAME)
,REVERSE(FIRST_NAME) FROM EMPLOYEES;
SELECT DEPARTMENT_ID,LOWER(DEPARTMENT_ID) FROM EMPLOYEES;
 
